diff --git a/build/toolchain/apple/linker_driver.py b/build/toolchain/apple/linker_driver.py
index 6c60f42fc961c9d85c0fc9952e23370b0115eb86..a25805b37a51c8f62334d2b11ea8fda3f5b325e3 100755
--- a/build/toolchain/apple/linker_driver.py
+++ b/build/toolchain/apple/linker_driver.py
@@ -6,6 +6,7 @@
 
 import os
 import os.path
+import re
 import shutil
 import subprocess
 import sys
@@ -190,9 +191,22 @@ class LinkerDriver(object):
             tools_paths.append(os.environ['PATH'])
         dsymutil_env = os.environ.copy()
         dsymutil_env['PATH'] = ':'.join(tools_paths)
-        subprocess.check_call(self._dsymutil_cmd +
-                              ['-o', dsym_out, linker_output],
-                              env=dsymutil_env)
+
+        # Run dsymutil and redirect stdout and stderr to the same pipe.
+        process = subprocess.Popen(self._dsymutil_cmd +
+                                   ['-o', dsym_out, linker_output],
+                                   env=dsymutil_env,
+                                   stdout=subprocess.PIPE,
+                                   stderr=subprocess.STDOUT)
+        stdout = process.communicate()[0].decode('utf-8')
+
+        # Filter the output to remove excessive log spam generated by a
+        # combination of ldd, icf and dsymutil.
+        # TODO(crbug.com/1279639): Fix in dsymutil itself.
+        stdout = _filter_dsym_output(stdout)
+        if stdout:
+            sys.stderr.write(stdout)
+
         return [dsym_out]
 
     def set_dsymutil_path(self, dsymutil_path):
@@ -265,6 +279,42 @@ class LinkerDriver(object):
         return []
 
 
+# Regular expressions matching log spam messages from dsymutil.
+DSYM_SPURIOUS_PATTERNS = [
+    re.compile(v) for v in [
+        r'failed to insert symbol',
+        r'could not find object file symbol for symbol',
+    ]
+]
+
+
+def _matches_dsym_spurious_patterns(line):
+    """Returns True if |line| matches one of DSYM_SPURIOUS_PATTERNS."""
+    for pattern in DSYM_SPURIOUS_PATTERNS:
+        if pattern.search(line) is not None:
+            return True
+    return False
+
+
+def _filter_dsym_output(dsymutil_output):
+    """Filers dsymutil output to remove excessive log spam.
+
+  Args:
+    dsymutil_output: string containing the output generated by dsymutil
+      (contains both stdout and stderr)
+
+  Returns:
+    The filtered output of dsymutil.
+  """
+    filtered_output = []
+    for line in dsymutil_output.splitlines():
+        if _matches_dsym_spurious_patterns(line):
+            continue
+        filtered_output.append(line + '\n')
+
+    return ''.join(filtered_output)
+
+
 def _find_tools_paths(full_args):
     """Finds all paths where the script should look for additional tools."""
     paths = []
